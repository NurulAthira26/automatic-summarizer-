# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1xUWeqZ8tSyTAyw155e54qI95dE-D8Gcq
"""

pip install transformers

# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1xUWeqZ8tSyTAyw155e54qI95dE-D8Gcq
"""

import streamlit as st
from transformers import AutoTokenizer, AutoModelForSeq2SeqLM

# Load the model and tokenizer
@st.cache_resource
def load_model():
    """Load the pretrained tokenizer and model."""
    tokenizer = AutoTokenizer.from_pretrained("t5-small")  # Replace 't5-small' with your model
    model = AutoModelForSeq2SeqLM.from_pretrained("t5-small")
    return tokenizer, model

# Summarization function
def summarize_text(input_text, tokenizer, model):
    """Generate a summary for the given input text."""
    inputs = tokenizer.encode("summarize: " + input_text, return_tensors="pt", max_length=512, truncation=True)
    summary_ids = model.generate(
        inputs, max_length=150, min_length=40, length_penalty=2.0, num_beams=4, early_stopping=True
    )
    return tokenizer.decode(summary_ids[0], skip_special_tokens=True)

# Streamlit App
def main():
    st.title("Automated Text Summarization")
    st.write("This app summarizes text using a Transformer-based model.")

    # Text input area
    input_text = st.text_area("Enter the text to summarize:", height=200)

    # Summarization button
    if st.button("Summarize"):
        if input_text.strip():
            with st.spinner("Loading model and generating summary..."):
                tokenizer, model = load_model()
                summary = summarize_text(input_text, tokenizer, model)
            st.subheader("Summary")
            st.write(summary)
        else:
            st.warning("Please provide some text to summarize.")

    # Sidebar for additional options
    st.sidebar.header("Settings")
    st.sidebar.write("Adjust model parameters here.")

if __name__ == "__main__":
    main()

